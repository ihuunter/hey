generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  address     String   @unique
  username    String?  @unique
  email       String?  @unique
  displayName String?
  bio         String?
  avatar      String?
  cover       String?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Social connections
  followers   Follow[] @relation("UserFollowers")
  following   Follow[] @relation("UserFollowing")
  
  // Content
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  bookmarks   Bookmark[]
  
  // Groups
  ownedGroups Group[]  @relation("GroupOwner")
  groupMembers GroupMember[]
  
  // Notifications
  notifications Notification[]
  
  // Settings
  settings    UserSettings?
  
  @@map("users")
}

model UserSettings {
  id                String  @id @default(cuid())
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  theme             String  @default("light")
  language          String  @default("en")
  emailNotifications Boolean @default(true)
  pushNotifications Boolean @default(true)
  
  @@map("user_settings")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id          String   @id @default(cuid())
  content     String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Media attachments (stored as JSON strings for SQLite)
  images      String? // JSON array of image URLs
  videos      String? // JSON array of video URLs
  
  // Engagement
  likes       Like[]
  comments    Comment[]
  bookmarks   Bookmark[]
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(true)
  
  // Group association
  groupId     String?
  group       Group?   @relation(fields: [groupId], references: [id])
  
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Nested comments
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  
  // Engagement
  likes     Like[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([userId, postId])
  @@map("bookmarks")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  avatar      String?
  cover       String?
  
  ownerId     String
  owner       User     @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  
  members     GroupMember[]
  posts       Post[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("groups")
}

model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  role      String   @default("member") // member, admin, owner
  joinedAt  DateTime @default(now())
  
  @@unique([userId, groupId])
  @@map("group_members")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type      String   // like, comment, follow, mention, etc.
  title     String
  message   String
  read      Boolean  @default(false)
  
  // Reference to the related entity
  entityId  String?
  entityType String?
  
  createdAt DateTime @default(now())
  
  @@map("notifications")
}